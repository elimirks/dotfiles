* Base
** Package Management
   #+begin_src emacs-lisp :tangle yes
(require 'package)
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")
                         ("melpa" . "http://melpa.org/packages/")))
(setq package-enable-at-startup nil)
(package-initialize)

;; Specifies local directory to load packages from
(let ((default-directory  "~/.emacs.d/lisp/"))
  (normal-top-level-add-to-load-path '("."))
  (normal-top-level-add-subdirs-to-load-path))

;; Package manager
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)
(setq use-package-always-ensure t) ; Always ensure package is downloaded
   #+end_src
** Essential Settings
   #+begin_src emacs-lisp :tangle yes
     ;; For ansi-term n' stuff
     (setq explicit-shell-file-name
           (if (file-readable-p "/usr/bin/zsh") "/usr/bin/zsh" "/bin/bash"))
     (setq inhibit-splash-screen t ; No welcome screen
           inhibit-startup-message t
           inhibit-startup-echo-area-message t)
     (tool-bar-mode -1) ; No toolbar
     (scroll-bar-mode -1) ; Hide scrollbars
     (menu-bar-mode -1) ; Hide menu bar
     (show-paren-mode t) ; Highlights matching parenthesis
     (setq ring-bell-function 'ignore) ; Disable ALL bells! They suck!
     ;(electric-pair-mode t) ; Add closing pairs automatically
     (setq initial-scratch-message "") ; No scratch text
     (fset 'yes-or-no-p 'y-or-n-p) ; y/n instead of yes/no
     ; No tabs use spaces
     (setq-default indent-tabs-mode nil)
     (setq-default tab-width 4)
     (defvaralias 'c-basic-offset 'tab-width)
     (defvaralias 'cperl-indent-level 'tab-width)

     ;; Default browser for links
     (setq browse-url-browser-function 'browse-url-generic
           browse-url-generic-program "google-chrome")
   #+end_src
** Backup Options
   #+begin_src emacs-lisp :tangle yes
(setq backup-by-copying t) ; Stop shinanigans with links
(setq backup-directory-alist '((".*" . "~/.bak.emacs/backup/")))
; Creates auto directory if it doesn't already exist
(if (eq nil (file-exists-p "~/.bak.emacs/"))
    (make-directory "~/.bak.emacs/"))
(if (eq nil (file-exists-p "~/.bak.emacs/auto"))
    (make-directory "~/.bak.emacs/auto"))
; Backup in one place. Flat, no tree structure
(setq auto-save-file-name-transforms '((".*" "~/.bak.emacs/auto/" t)))
   #+end_src
** Dropbox Plugin
   Handy functions for starting and stopping dropbox (e.g. mostly used for Orgzly)
   On the Linux lab computers at UTM, we have a disk quota so this is a hack fix :)
   #+begin_src emacs-lisp :tangle yes
(defun eli/dropbox-start ()
  (interactive)
  (if (eq nil (file-exists-p "/virtual/mireckie/dropbox/.dropbox-dist"))
      (call-process-shell-command "(python ~/.emacs.d/dropbox.py start -i&)")
    (call-process-shell-command "(python ~/.emacs.d/dropbox.py start&)")))
(defun eli/dropbox-stop ()
  (interactive)
  (call-process-shell-command "python ~/.emacs.d/dropbox.py stop&"))
   #+end_src
** Plugins
   [[https://github.com/emacs-helm/helm][Helm]]. A nice minibuffer / completion / etc framework
   #+begin_src emacs-lisp :tangle yes
     (use-package helm
       :bind
       (("M-x" . helm-M-x)
        ("C-x C-f" . helm-find-files)
        ("C-x b" . helm-buffers-list)
        :map helm-find-files-map
        ("<RET>" . elimirks/helm-return-find-file))
       :config
       (require 'helm-config)
       (helm-mode 1)
       (global-set-key (kbd "M-x") 'helm-M-x)
       (setq helm-M-x-fuzzy-match t) ; Fuzzy M-x matching
       (setq helm-split-window-in-side-p t)) ; Make helm split on the bottom edge

     ;; For using the enter key in helm
     (defun elimirks/helm-return-find-file ()
       (interactive)
       (if (file-directory-p (helm-get-selection))
           (helm-execute-persistent-action)
         (helm-maybe-exit-minibuffer)))
   #+end_src
   
   [[https://www.emacswiki.org/emacs/CompanyMode][Company Mode]]. For autocompletion
   #+begin_src emacs-lisp :tangle yes
     (use-package company
       :init
       (global-company-mode)
       :config
       (setq company-idle-delay 0) ; Delay to complete
       (setq company-minimum-prefix-length 1)
       (setq company-selection-wrap-around t) ; Loops around suggestions
       (setq company-global-modes '(not org-mode)) ; Disable autocomplete in org

       (define-key company-active-map [backtab] 'company-select-previous)
       (define-key company-active-map [tab] 'company-select-next))
   #+end_src

   [[https://www.emacswiki.org/emacs/Magit][Magit]]. Git plugin that makes life easy.
   #+begin_src emacs-lisp :tangle yes
     (use-package magit)
     ;; Vim bindings for magit
     (use-package evil-magit)
   #+end_src
   
   [[https://github.com/justbur/emacs-which-key][Which Key]]. Shows help dialogs for keybindings
   #+begin_src emacs-lisp :tangle yes
     (use-package which-key
       :config
       (which-key-mode))
   #+end_src
   
   [[https://github.com/CodeFalling/nlinum-relative][Nlinum Relative]]. Relative line numbers n' stuff
   #+begin_src emacs-lisp :tangle yes
          (use-package nlinum-relative
            :config
            (setq nlinum-relative-redisplay-delay 0)
            (nlinum-relative-setup-evil)
            (add-hook 'matlab-mode-hook 'nlinum-relative-mode)
            (add-hook 'prog-mode-hook 'nlinum-relative-mode))
   #+end_src
   
   [[https://github.com/editorconfig/editorconfig-emacs][EditorConfig]]. For consistent project code styles
   #+begin_src emacs-lisp :tangle yes
     (use-package editorconfig
       :ensure t
       :config
       (editorconfig-mode 1))
   #+end_src

   [[https://julien.danjou.info/projects/emacs-packages#rainbow-mode][Rainbow Mode]]. Highlights colors (~#ffffff~ syntax)
   See [[http://stackoverflow.com/questions/16048231/how-to-enable-a-non-global-minor-mode-by-default-on-emacs-startup][this StackOverflow post]] for how to enable it on a per-major-mode basis.
   #+begin_src emacs-lisp :tangle yes
     (use-package rainbow-mode)

     ; Enable for all programming modes
     (add-hook 'prog-mode-hook 'my-css-mode-hook)
     (defun my-css-mode-hook ()
       (rainbow-mode 1))

   #+end_src

   [[https://www.emacswiki.org/emacs/nameses][Nameses]]. For managing multiple desktops
   #+begin_src emacs-lisp :tangle yes
     (require 'desktop)
     (require 'nameses)
     (setq nameses-ido-mode nil)
   #+end_src
   
   [[https://www.emacswiki.org/emacs/DelightedModes][Delight.]] Makes the toolbar mode display more of a "delight"
   #+begin_src emacs-lisp :tangle yes
     (use-package delight
       :config
       (delight '((undo-tree-mode "" undo-tree)
                  (which-key-mode "" which-key)
                  (helm-mode "" helm)
                  (editorconfig-mode "" editorconfig)
                  (auto-revert-mode "" autorevert))))
   #+end_src
   
   [[https://github.com/cyrus-and/zoom][Zoom.]] Zooms current pane!
   #+begin_src emacs-lisp :tangle yes
     (use-package zoom
       :config
       (custom-set-variables
        '(zoom-mode t)
        ; Golden ratio! Beaut.
        '(zoom-size '(0.618 . 0.618))))
   #+end_src
** Handy functions
   Used to reload this config:
   #+begin_src emacs-lisp :tangle yes
     (defun eli/load-init ()
       "Reloads init file"
       (interactive)
       (load-file "~/.emacs.d/init.el"))
   #+end_src
* Theme
** Configure a nice theme
   #+begin_src emacs-lisp :tangle yes
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
(load-theme 'spolsky t)
(set-face-attribute 'default nil :height 100)
;; When in terminal
(unless (display-graphic-p) 
  (setq nlinum-format "%d ")
  (add-to-list 'default-frame-alist '(background-color . "color-16"))
  (custom-set-faces
   '(linum ((t (:background "color-16" :foreground "#9fc59f"))))))
   #+end_src
** Nice eshell evil bindings
   #+begin_src emacs-lisp :tangle yes
(defun eshell-bindings ()
    (define-key evil-normal-state-map (kbd "<up>")
      'eshell-previous-matching-input-from-input)
    (define-key evil-normal-state-map (kbd "<down>")
      'eshell-next-matching-input-from-input))
   #+end_src
** Fancy rainbox parens to sooth my eyes
   #+begin_src emacs-lisp :tangle yes
(use-package rainbow-delimiters
  :config
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
   #+end_src
** Pretty symbols
*** Global
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defun eli/pretty-symbol-push-default ()
        (push '("!=" . ?≠) prettify-symbols-alist)
        (push '("<=" . ?≤) prettify-symbols-alist)
        (push '(">=" . ?≥) prettify-symbols-alist)
        (push '("=>" . ?⇒) prettify-symbols-alist))
    #+END_SRC
    
    #+BEGIN_SRC emacs-lisp :tangle yes
      (mapc
       (lambda (hook)
         (add-hook 'hook (lambda () (eli/pretty-symbol-push-default))))
       '(c-mode))
    #+END_SRC
*** C & C++
    #+BEGIN_SRC emacs-lisp :tangle yes
      (mapc
       (lambda (hook)
         (add-hook 'hook (lambda ()
                           (eli/pretty-symbol-push-default)
                           (push '("NULL"     . ?∅) prettify-symbols-alist)
                           (push '("||"       . ?∨) prettify-symbols-alist)
                           (push '("&&"       . ?∧) prettify-symbols-alist)
                           (push '("!"        . ?¬) prettify-symbols-alist)
                           (prettify-symbols-mode t))))
         '(c-mode c++-mode))
    #+END_SRC
*** Python
    #+BEGIN_SRC emacs-lisp :tangle yes
      (add-hook 'python-mode-hook
                (lambda ()
                  (eli/pretty-symbol-push-default)
                  (push '("def"      . ?ƒ) prettify-symbols-alist)
                  (push '("sum"      . ?Σ) prettify-symbols-alist)
                  (push '("**2"      . ?²) prettify-symbols-alist)
                  (push '("**3"      . ?³) prettify-symbols-alist)
                  (push '("None"     . ?∅) prettify-symbols-alist)
                  (push '("in"       . ?∈) prettify-symbols-alist)
                  (push '("not in"   . ?∉) prettify-symbols-alist)
                  (push '("or"       . ?∨) prettify-symbols-alist)
                  (push '("and"      . ?∧) prettify-symbols-alist)
                  (push '("not"      . ?¬) prettify-symbols-alist)
                  (push '("math.pi"  . ?π) prettify-symbols-alist)
                  (prettify-symbols-mode t)))
    #+END_SRC
*** Lisp
    #+BEGIN_SRC emacs-lisp :tangle yes
      (add-hook 'emacs-lisp-mode-hook
                (lambda ()
                  (eli/pretty-symbol-push-default)
                  (push '("lambda"   . ?λ) prettify-symbols-alist)
                  (push '("defun"    . ?ƒ) prettify-symbols-alist)
                  (push '("defmacro" . ?μ) prettify-symbols-alist)
                  (push '("defvar"   . ?ν) prettify-symbols-alist)
                  (prettify-symbols-mode t)))
    #+END_SRC
* Evil Mode
** Load and configure evil with general
   #+begin_src emacs-lisp :tangle yes
     ;; For leader bindings
     (use-package general)
     ;; Base evil package
     (use-package evil
       :demand
       :init
       ;; Unbind <C-u> for evil mode'
       (setq evil-want-C-u-scroll t)
       :config
       (evil-mode t)

       ;; Make asterisk search for dash-included-words
       (setq-default evil-symbol-word-search t)
       ;; Put the cursor in newly created panes
       ;;(setq evil-split-window-below t)
       ;;(setq evil-vsplit-window-right t)

       ;; Automatically opens helm after :e
       (define-key evil-ex-map "e " 'helm-find-files)
       (eshell-bindings)
       
       (general-create-definer bind-leader
                               :keymaps 'global
                               :states '(normal emacs)
                               :prefix "SPC")

       :general
       (:states 'motion
                "k" 'evil-previous-visual-line
                "j" 'evil-next-visual-line)
       (:states 'operator
                "k" 'evil-previous-line
                "j" 'evil-next-line)
       

       (:states 'normal
                "C-z"  (lambda () (interactive)  (when (eq (display-graphic-p) nil) (suspend-frame))))

       (bind-leader
         "dl" 'nameses-load
         "ds" 'nameses-save
         "dr" 'nameses-reset
         "w" 'save-buffer
         "k" 'kill-this-buffer
         "e" 'eshell
         "tt" '(lambda () (interactive) (helm-gtags-find-tag (thing-at-point 'symbol)))
         "tr" '(lambda () (interactive) (helm-gtags-find-rtag (thing-at-point 'symbol)))
         "tp" '(lambda () (interactive) (helm-gtags-pop-stack))
         "ts" '(lambda () (interactive) (helm-gtags-show-stack))
         "g" 'magit-status
         "m" 'helm-mini
         "r" 'recompile
         "a" 'org-agenda
         "c" 'cfw:open-org-calendar
         "s" 'ispell
         "x" 'helm-M-x
         "l" 'org-timeline))

     ;; Tpope's surround
     (use-package evil-surround
       :config
       (global-evil-surround-mode 1))
   #+end_src
** Make esc quit like vim
   #+begin_src emacs-lisp :tangle yes
(defun minibuffer-keyboard-quit ()
  "Abort recursive edit.
    In Delete Selection mode, if the mark is active, just deactivate it;
    then it takes a second \\[keyboard-quit] to abort the minibuffer."
  (interactive)
  (if (and delete-selection-mode transient-mark-mode mark-active)
      (setq deactivate-mark  t)
    (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
    (abort-recursive-edit)))
(define-key evil-normal-state-map [escape] 'keyboard-quit)
(define-key evil-visual-state-map [escape] 'keyboard-quit)
(define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
   #+end_src
** External config for powerline and evil powerline
   #+begin_src emacs-lisp :tangle yes
;; (~/.emacs.d/lisp/init-powerline.el)
(require 'init-powerline)
   #+end_src
** Keybindings
   #+begin_src emacs-lisp :tangle yes
     (define-key evil-normal-state-map (kbd "<up>")
       'evil-window-up)
     (define-key evil-normal-state-map (kbd "<down>")
       'evil-window-down)
     (define-key evil-normal-state-map (kbd "<left>")
       'evil-window-left)
     (define-key evil-normal-state-map (kbd "<right>")
       'evil-window-right)
   #+end_src
* Org
** Basic
  #+begin_src emacs-lisp :tangle yes
    ;; Better looking org headers
    (use-package org-bullets
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

    (setq
     org-pretty-entities t ; Alows org to displayed UTF-8 chars like \alpha
     org-startup-truncated nil
     org-src-fontify-natively t
     org-agenda-files '("~/Dropbox/Notes/everything.org")
     org-src-window-setup 'current-window
     org-ellipsis " ⤵"
     ;; Allows custom inline image sizes
     org-image-actual-width nil
     ;; Makes inline latex previews bigger
     org-format-latex-options (plist-put org-format-latex-options :scale 1.7)
     org-export-latex-table-caption-above nil
     org-latex-table-caption-above nil
     org-latex-caption-above nil)

    (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
    (global-set-key "\C-cl" 'org-store-link)
    ;; To enable an agenda hotkey
    (global-set-key "\C-ca" 'org-agenda)
    (global-set-key "\C-cb" 'org-iswitchb)
  #+end_src
  
  Custom Org Keybindings
  #+begin_src emacs-lisp :tangle yes
    (define-key evil-normal-state-map (kbd "M-h") 'org-metaleft)
    (define-key evil-normal-state-map (kbd "M-s") 'org-metaright)
    (define-key evil-normal-state-map (kbd "M-e") 'org-latex-export-to-pdf)
  #+end_src
** Agenda
  #+begin_src emacs-lisp :tangle yes
    ;; Match those tagged with, are not scheduled/deadlined, are not DONE.
    (setq org-agenda-custom-commands
          '(("d" "non-[d]eadlined tasks"
             tags "-DEADLINE={.+}/!+TODO|+STARTED|+WAITING -SCHEDULED={.+}/!+TODO|+STARTED|+WAITING")))

    ;; Make the agenda schedule prettier
    (setq org-agenda-prefix-format
          '((agenda . " %i %-12t% s %b\n                           ")
            (timeline . "  % s")
            (todo . " %i %-12:c")
            (tags . " %i %-12:c")
            (search . " %i %-12:c")))

    (setq org-todo-keywords
          '((sequence "TODO" "STARTED" "WAITING" "|" "DONE")))

    ;; Hide DONE items
    (setq org-agenda-skip-scheduled-if-done t
          org-agenda-skip-deadline-if-done t)
    ;; Set a 30 day span, instead of a week view
    (setq org-agenda-start-day "-3d"
          org-agenda-span 30)
    (setq org-agenda-show-all-dates nil) ; Omit empty days in the agenda
    (setq org-deadline-warning-days 0) ; Disable pre-warnings
    ;; Hide the time grid by default
    (setq org-agenda-use-time-grid nil)
  #+end_src
** Calendar
  #+begin_src emacs-lisp :tangle yes
    (use-package calfw
      :config
      (require 'calfw-org)
     
      ;; Nicer Unicode characters
      (setq cfw:fchar-junction ?╋
            cfw:fchar-vertical-line ?┃
            cfw:fchar-horizontal-line ?━
            cfw:fchar-left-junction ?┣
            cfw:fchar-right-junction ?┫
            cfw:fchar-top-junction ?┯
            cfw:fchar-top-left-corner ?┏
            cfw:fchar-top-right-corner ?┓)

      ;; Deutsch format
      (setq calendar-month-name-array
            ["Januar" "Februar" "März"      "April"   "Mai"      "Juni"
             "Juli"   "August"  "September" "Oktober" "November" "Dezember"])
      (setq calendar-day-name-array
            ["Sonntag" "Montag" "Dienstag" "Mittwoch" "Donnerstag" "Freitag" "Samstag"])
      (setq calendar-week-start-day 1))
  #+end_src
** LaTeX
  Settings for exporting to LaTeX
  #+begin_src emacs-lisp :tangle yes
    (require 'ox-latex)
    (add-to-list 'org-latex-packages-alist '("" "minted"))
    (setq org-latex-listings 'minted)

    (setq org-latex-pdf-process
          '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
            "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
            "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

  #+end_src
* Language Modes
** Markdown
   #+begin_src emacs-lisp :tangle yes
(use-package markdown-mode
  :mode ("\\.\\(m\\(ark\\)?down\\|md\\)$" . markdown-mode)
  :config)
   #+end_src
** Prolog
   #+begin_src emacs-lisp :tangle yes
     (add-to-list 'auto-mode-alist '("\\.pro\\'" . prolog-mode))
     (add-hook 'prolog-mode-hook
               (lambda ()
                 (local-set-key (kbd "C-c C-c") 'prolog-compile-file)
                 (local-set-key (kbd "<backtab>") 'ediprolog-dwim)))
   #+end_src
** DocViewMode
   This mode is for document viewing, such as PDFs.

   #+begin_src emacs-lisp :tangle yes
     ;; Evil mode caused the document to blink - this fixes it
     (evil-set-initial-state 'doc-view-mode 'emacs)
     (add-hook 'doc-view-mode-hook
               (lambda ()
                 (set (make-local-variable 'evil-emacs-state-cursor) (list nil))))
   #+end_src
** Matlab
   #+begin_src emacs-lisp :tangle yes
     (use-package matlab-mode
       :config
       (autoload 'matlab-mode "matlab" "Matlab Editing Mode" t)
       (add-to-list
        'auto-mode-alist
        '("\\.m$" . matlab-mode))
       (setq matlab-indent-function t)
       (setq matlab-shell-command "matlab")
       ;; elisp setup for matlab-mode:
       (setq matlab-shell-command-switches (list "-nodesktop" "-nosplash")))
   #+end_src
   
** C/C++
   #+begin_src emacs-lisp :tangle yes
     (require 'cc-mode)

     (eval-after-load 'company
       '(add-to-list 'company-backends
                     '(company-backends company-gtags)))
   #+end_src
** Blarb
   #+begin_src emacs-lisp :tangle yes
     (require 'blarb-mode)
   #+end_src
** CSV
   #+begin_src emacs-lisp :tangle yes
     (use-package csv-mode
       :mode ("\\.csv$" . csv-mode)
       :config
       (add-hook 'csv-mode-hook
                 (lambda () (define-key csv-mode-map (kbd "C-c C-c") (defun csv-align-visible (&optional arg) "Align visible fields" (interactive "P") (csv-align-fields nil (window-start) (window-end)))))))
   #+end_src
   
** ERC
   #+begin_src emacs-lisp :tangle yes
     (setq erc-hide-list '("JOIN" "PART" "QUIT"))
   #+end_src
** Python
   #+begin_src emacs-lisp :tangle yes
     (defun eli/python-mode-hook ()
       ; TODO: Check if jedi & epc are installed in pip!
       (add-to-list 'company-backends 'company-jedi)
       (define-key python-mode-map (kbd "C-c C-d") 'jedi:show-doc))
   #+end_src
